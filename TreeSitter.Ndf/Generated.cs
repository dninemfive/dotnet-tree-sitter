//----------------------
// <auto-generated>
//     Generated by node_generator.py
//     source: langs-native/tree-sitter-ndf/src/node-types.json
// </auto-generated>
//----------------------

#nullable enable

using System.Linq;

namespace TreeSitter.Ndf.Nodes {

    public abstract class NdfLanguageNode
    {
        public static NdfLanguageNode FromNode(TreeSitter.Node node) {
            if (node is null) throw new System.ArgumentNullException(nameof(node));
            if (!node.IsNamed) return new NdfLanguageNodeTerminalNode(node);
            switch (node.Kind) {
                case "generic_indexed": return new GenericIndexed(node);
                case "comment_inline": return new CommentInline(node);
                case "ref_indexed": return new RefIndexed(node);
                case "members": return new Members(node);
                case "string": return new String(node);
                case "visibility": return new Visibility(node);
                case "number_hex": return new NumberHex(node);
                case "group": return new Group(node);
                case "unnamed": return new Unnamed(node);
                case "vector_type": return new VectorType(node);
                case "template": return new Template(node);
                case "type": return new Type(node);
                case "keyword": return new Keyword(node);
                case "guid": return new Guid(node);
                case "number_float": return new NumberFloat(node);
                case "comment_block_classic": return new CommentBlockClassic(node);
                case "builtin_type": return new BuiltinType(node);
                case "operator": return new Operator(node);
                case "items": return new Items(node);
                case "assignment": return new Assignment(node);
                case "pairs": return new Pairs(node);
                case "ref_scope": return new RefScope(node);
                case "list": return new List(node);
                case "generic": return new Generic(node);
                case "ref_nested": return new RefNested(node);
                case "params": return new Params(node);
                case "ternary": return new Ternary(node);
                case "param": return new Param(node);
                case "ref_terminal": return new RefTerminal(node);
                case "source_file": return new SourceFile(node);
                case "number_dec": return new NumberDec(node);
                case "binary_expression": return new BinaryExpression(node);
                case "comment_block_curly": return new CommentBlockCurly(node);
                case "ref_member": return new RefMember(node);
                case "unary_expression": return new UnaryExpression(node);
                case "map": return new Map(node);
                case "builtin_vector_type": return new BuiltinVectorType(node);
                case "ref_nested_unnamed": return new RefNestedUnnamed(node);
                case "comment_block_round": return new CommentBlockRound(node);
                case "nil": return new Nil(node);
                case "name": return new Name(node);
                case "member": return new Member(node);
                case "object": return new Object(node);
                case "pair": return new Pair(node);
                case "ERROR": return new ErrorNode(node);
                default: throw new System.ArgumentException("unknown node type: " + node.Kind, nameof(node));
            }
        }

    
        public string Kind { get; set; }

        protected NdfLanguageNode(TreeSitter.Node node)
        {
            Kind = node.Kind;
        }
    }
    
    public class NdfLanguageNodeTerminalNode : NdfLanguageNode
    {
        public NdfLanguageNodeTerminalNode(TreeSitter.Node node) : base(node)
        {
        }
    }
    
    public class ErrorNode : NdfLanguageNode
    {
        public ErrorNode(TreeSitter.Node node) : base(node)
        {
        }
    }

    public interface IExpression
    {
    }

    public interface INumber : IExpression
    {
    }

    public interface IRef
    {
    }

    public class Assignment : NdfLanguageNode, IExpression
    {
        public Name Name { get; set; }
        public IExpression Value { get; set; }
        public System.Collections.Generic.List<Keyword> Children { get; set; }
        public Assignment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "assignment");
            
            this.Name = new Name(node.ChildByFieldName("name"));
            this.Value = (IExpression) NdfLanguageNode.FromNode(node.ChildByFieldName("value"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Keyword(x)).ToList();
        }
    }

    public class BinaryExpression : NdfLanguageNode, IExpression
    {
        public IExpression Left { get; set; }
        public Operator Operator { get; set; }
        public IExpression Right { get; set; }
        public BinaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_expression");
            
            this.Left = (IExpression) NdfLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new Operator(node.ChildByFieldName("operator"));
            this.Right = (IExpression) NdfLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class BuiltinType : NdfLanguageNode
    {
        public BuiltinType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "builtin_type");
            
        }
    }

    public class BuiltinVectorType : NdfLanguageNode
    {
        public BuiltinVectorType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "builtin_vector_type");
            
        }
    }

    public class CommentBlockClassic : NdfLanguageNode
    {
        public CommentBlockClassic(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment_block_classic");
            
        }
    }

    public class CommentBlockCurly : NdfLanguageNode
    {
        public CommentBlockCurly(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment_block_curly");
            
        }
    }

    public class CommentBlockRound : NdfLanguageNode
    {
        public CommentBlockRound(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment_block_round");
            
        }
    }

    public class Generic : NdfLanguageNode, IExpression
    {
        public System.Collections.Generic.List<NdfLanguageNode> Children { get; set; }
        public Generic(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "generic");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (NdfLanguageNode) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class GenericIndexed : NdfLanguageNode
    {
        public System.Collections.Generic.List<IExpression> Children { get; set; }
        public GenericIndexed(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "generic_indexed");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IExpression) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Group : NdfLanguageNode, IExpression
    {
        public IExpression? Item { get; set; }
        public Group(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "group");
            
            {
                var tmp = node.ChildByFieldName("item");
                this.Item = tmp is null ? null : (IExpression) NdfLanguageNode.FromNode(tmp);
            }
        }
    }

    public class Guid : NdfLanguageNode, IExpression
    {
        public NumberHex TheGuid { get; set; }
        public System.Collections.Generic.List<Keyword> Children { get; set; }
        public Guid(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "guid");
            
            this.TheGuid = new NumberHex(node.ChildByFieldName("guid"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Keyword(x)).ToList();
        }
    }

    public class Items : NdfLanguageNode
    {
        public System.Collections.Generic.List<IExpression> Children { get; set; }
        public Items(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "items");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IExpression) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class List : NdfLanguageNode, IExpression
    {
        public Items? Items { get; set; }
        public List(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "list");
            
            {
                var tmp = node.ChildByFieldName("items");
                this.Items = tmp is null ? null : new Items(tmp);
            }
        }
    }

    public class Map : NdfLanguageNode, IExpression
    {
        public Pairs? Pairs { get; set; }
        public System.Collections.Generic.List<Keyword> Children { get; set; }
        public Map(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "map");
            
            {
                var tmp = node.ChildByFieldName("pairs");
                this.Pairs = tmp is null ? null : new Pairs(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Keyword(x)).ToList();
        }
    }

    public class Member : NdfLanguageNode
    {
        public Name Name { get; set; }
        public Type? Type { get; set; }
        public IExpression? Value { get; set; }
        public Member(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "member");
            
            this.Name = new Name(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("type");
                this.Type = tmp is null ? null : new Type(tmp);
            }
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (IExpression) NdfLanguageNode.FromNode(tmp);
            }
        }
    }

    public class Members : NdfLanguageNode
    {
        public System.Collections.Generic.List<NdfLanguageNode> Children { get; set; }
        public Members(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "members");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (NdfLanguageNode) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Name : NdfLanguageNode
    {
        public Name(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "name");
            
        }
    }

    public class Nil : NdfLanguageNode, INumber
    {
        public Nil(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "nil");
            
        }
    }

    public class NumberFloat : NdfLanguageNode, INumber
    {
        public NumberFloat(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "number_float");
            
        }
    }

    public class Object : NdfLanguageNode, IExpression
    {
        public Members? Members { get; set; }
        public Type Type { get; set; }
        public Object(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "object");
            
            {
                var tmp = node.ChildByFieldName("members");
                this.Members = tmp is null ? null : new Members(tmp);
            }
            this.Type = new Type(node.ChildByFieldName("type"));
        }
    }

    public class Pair : NdfLanguageNode, IExpression
    {
        public IExpression Left { get; set; }
        public IExpression Right { get; set; }
        public Pair(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pair");
            
            this.Left = (IExpression) NdfLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Right = (IExpression) NdfLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class Pairs : NdfLanguageNode
    {
        public System.Collections.Generic.List<Pair> Children { get; set; }
        public Pairs(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pairs");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Pair(x)).ToList();
        }
    }

    public class Param : NdfLanguageNode
    {
        public Name Name { get; set; }
        public Type? Type { get; set; }
        public IExpression? Value { get; set; }
        public Param(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "param");
            
            this.Name = new Name(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("type");
                this.Type = tmp is null ? null : new Type(tmp);
            }
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (IExpression) NdfLanguageNode.FromNode(tmp);
            }
        }
    }

    public class Params : NdfLanguageNode
    {
        public System.Collections.Generic.List<Param> Children { get; set; }
        public Params(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "params");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Param(x)).ToList();
        }
    }

    public class RefIndexed : NdfLanguageNode, IExpression, IRef
    {
        public System.Collections.Generic.List<NdfLanguageNode> Children { get; set; }
        public RefIndexed(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ref_indexed");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (NdfLanguageNode) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class RefMember : NdfLanguageNode, IExpression, IRef
    {
        public System.Collections.Generic.List<IRef> Children { get; set; }
        public RefMember(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ref_member");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IRef) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class RefNested : NdfLanguageNode, IExpression, IRef
    {
        public System.Collections.Generic.List<NdfLanguageNode> Children { get; set; }
        public RefNested(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ref_nested");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (NdfLanguageNode) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class RefNestedUnnamed : NdfLanguageNode, IRef
    {
        public System.Collections.Generic.List<IRef> Children { get; set; }
        public RefNestedUnnamed(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ref_nested_unnamed");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IRef) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class RefTerminal : NdfLanguageNode, IExpression, IRef
    {
        public RefTerminal(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ref_terminal");
            
        }
    }

    public class SourceFile : NdfLanguageNode
    {
        public System.Collections.Generic.List<NdfLanguageNode> Children { get; set; }
        public SourceFile(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "source_file");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (NdfLanguageNode) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class String : NdfLanguageNode, IExpression
    {
        public String(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string");
            
        }
    }

    public class Template : NdfLanguageNode
    {
        public Name Name { get; set; }
        public Params? Params { get; set; }
        public Object Value { get; set; }
        public System.Collections.Generic.List<Keyword> Children { get; set; }
        public Template(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "template");
            
            this.Name = new Name(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("params");
                this.Params = tmp is null ? null : new Params(tmp);
            }
            this.Value = new Object(node.ChildByFieldName("value"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Keyword(x)).ToList();
        }
    }

    public class Ternary : NdfLanguageNode, IExpression
    {
        public IExpression Cond { get; set; }
        public IExpression False { get; set; }
        public IExpression True { get; set; }
        public Ternary(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ternary");
            
            this.Cond = (IExpression) NdfLanguageNode.FromNode(node.ChildByFieldName("cond"))!;
            this.False = (IExpression) NdfLanguageNode.FromNode(node.ChildByFieldName("false"))!;
            this.True = (IExpression) NdfLanguageNode.FromNode(node.ChildByFieldName("true"))!;
        }
    }

    public class Type : NdfLanguageNode
    {
        public System.Collections.Generic.List<NdfLanguageNode> Children { get; set; }
        public Type(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (NdfLanguageNode) NdfLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class UnaryExpression : NdfLanguageNode, IExpression
    {
        public Operator Operator { get; set; }
        public IExpression Right { get; set; }
        public UnaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unary_expression");
            
            this.Operator = new Operator(node.ChildByFieldName("operator"));
            this.Right = (IExpression) NdfLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class Unnamed : NdfLanguageNode
    {
        public Object Object { get; set; }
        public System.Collections.Generic.List<Keyword> Children { get; set; }
        public Unnamed(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unnamed");
            
            this.Object = new Object(node.ChildByFieldName("object"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Keyword(x)).ToList();
        }
    }

    public class VectorType : NdfLanguageNode, IExpression
    {
        public Items? Items { get; set; }
        public NdfLanguageNode Type { get; set; }
        public VectorType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "vector_type");
            
            {
                var tmp = node.ChildByFieldName("items");
                this.Items = tmp is null ? null : new Items(tmp);
            }
            this.Type = (NdfLanguageNode) NdfLanguageNode.FromNode(node.ChildByFieldName("type"))!;
        }
    }

    public class Visibility : NdfLanguageNode, IExpression
    {
        public NdfLanguageNode Item { get; set; }
        public Keyword Type { get; set; }
        public Visibility(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "visibility");
            
            this.Item = (NdfLanguageNode) NdfLanguageNode.FromNode(node.ChildByFieldName("item"))!;
            this.Type = new Keyword(node.ChildByFieldName("type"));
        }
    }

    public class CommentInline : NdfLanguageNode
    {
        public CommentInline(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment_inline");
            
        }
    }

    public class Keyword : NdfLanguageNode
    {
        public Keyword(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyword");
            
        }
    }

    public class NumberDec : NdfLanguageNode, INumber
    {
        public NumberDec(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "number_dec");
            
        }
    }

    public class NumberHex : NdfLanguageNode, INumber
    {
        public NumberHex(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "number_hex");
            
        }
    }

    public class Operator : NdfLanguageNode
    {
        public Operator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "operator");
            
        }
    }

    public class RefScope : NdfLanguageNode
    {
        public RefScope(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ref_scope");
            
        }
    }
}